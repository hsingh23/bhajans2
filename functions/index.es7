// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//
// exports.helloWorld = functions.https.onRequest((request, response) => {
//  response.send("Hello from Firebase!");
// });
const functions = require('firebase-functions');
const admin = require('firebase-admin');
admin.initializeApp(functions.config().firebase);

// This is a Hello World function which writes to the database.
exports.confirmBeta = functions.database.ref('/confirmBeta/{uid}').onWrite(async event => {
  var userInfo = event.data.val()
  if (userInfo) {
    console.log(userInfo)
    var tokens = {}
    // get list of admins
    var admins = Object.keys((await admin.database().ref('/admin').once('value')).val() || {})
    console.log(admins)

    // for each admin, get tokens
    var potentialUsersTokens = await Promise.all(admins.map(uid => admin.database().ref(`/messages/${uid}/tokens`).once('value')))
    potentialUsersTokens.forEach(usersTokens => {
      if (usersTokens.val()) {
        Object.keys(usersTokens.val()).forEach((token, index) => {
          // associate the token with the uid in case you need to remove a bad token
          tokens[token] = admins[index]
          console.log(`Found token ${token} for ${admins[index]}`);
        })
      }
    })
    // for each token send message
    var payload = {
      notification: {
        title: 'New user awaiting access!',
        body: `${userInfo.name} is waiting to joing beta.`,
        clickAction: 'https://sing.withamma.com/#/admin'
      }
    };
    var tokensList = Object.keys(tokens)
    console.log('tokensList', tokensList);
    return admin.messaging().sendToDevice(tokensList, payload).then(response => {
      // For each message check if there was an error.
      const tokensToRemove = [];
      response.results.forEach((result, index) => {
        const error = result.error;
        if (error) {
          console.error('Failure sending notification to', tokensList[index], error);
          // Cleanup the tokens who are not registered anymore.
          if (error.code === 'messaging/invalid-registration-token' ||
            error.code === 'messaging/registration-token-not-registered') {
            tokensToRemove.push(admin.database().ref(`/messages/${tokens[tokensList[index]]}/tokens/${tokensList[index]}`).remove());
          }
        }
      });
      return Promise.all(tokensToRemove);
    });
  }
});